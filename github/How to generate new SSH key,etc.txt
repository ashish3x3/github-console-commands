Genetrating ssh keys and connecting with it :

STEP 2 :Generate a new SSH key

$ ssh-keygen -t rsa -C "aks133844@gmail.com"

-- just press Enter to continue.
Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]

--keep it empty..
Enter passphrase (empty for no passphrase): [Type a passphrase]
# Enter same passphrase again: [Type passphrase again]

Your identification has been saved in /Users/you/.ssh/id_rsa.
# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
# The key fingerprint is:
# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.co





Step 3: Add your key to the ssh-agent:

1.Ensure ssh-agent is enabled:
eval $(ssh-agent)


2.Add your generated SSH key to the ssh-agent:
$ ssh-add ~/.ssh/id_rsa

Step 4: Add your SSH key to your account

//clip < ~/.ssh/id_rsa.pub    --not working use this..

cat ~/.ssh/id_rsa.pub >/dev/clipboard


Add the copied key to GitHub:

    Settings icon in the user barIn the top right corner of any page, click 

.

SSH keysIn the user settings sidebar, click SSH keys.

SSH Key buttonClick Add SSH key.

In the Title field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call this key "Personal MacBook Air".

The key fieldPaste your key into the "Key" field.

The Add key buttonClick Add key.

Confirm the action by entering your GitHub password.


Step 5: Test the connection:



Open Git Bash and enter:

ssh -T git@github.com
# Attempts to ssh to GitHub

You may see this warning:

# The authenticity of host 'github.com (207.97.227.239)' can't be established.
# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
# Are you sure you want to continue connecting (yes/no)?

Verify the fingerprint in the message you see matches the following message, then type yes:

# Hi username! You've successfully authenticated, but GitHub does not
# provide shell access.

If the username in the message is yours, you've successfully set up your SSH key!

====================================================

If you're switching from HTTPS to SSH, you'll now need to update your remote repository URLs. For more information, see:

Changing a remote's URL

git remote set-url command changes an existing remote repository URL.

The git remote set-url command takes two arguments:

    An existing remote name. For example, origin or upstream are two common choices.

    A new URL for the remote. For example:

        If you're updating to use HTTPS, your URL might look like:

        https://github.com/USERNAME/OTHERREPOSITORY.git

        If you're updating to use SSH, your URL might look like:

        git@github.com:USERNAME/OTHERREPOSITORY.git



Changing a remote's URL

The git remote set-url command changes an existing remote repository URL.

Tip: For information on the difference between HTTPS and SSH URLs, see "Which remote URL should I use?"

The git remote set-url command takes two arguments:

    An existing remote name. For example, origin or upstream are two common choices.

    A new URL for the remote. For example:

        If you're updating to use HTTPS, your URL might look like:

        https://github.com/USERNAME/OTHERREPOSITORY.git

        If you're updating to use SSH, your URL might look like:

        git@github.com:USERNAME/OTHERREPOSITORY.git

Switching remote URLs from SSH to HTTPS

    Open Terminal (for Mac users) or the command prompt (for Windows and Linux users).

    Change the current working directory to your local project.

    List your existing remotes in order to get the name of the remote you want to change.

    git remote -v
    # origin  git@github.com:USERNAME/REPOSITORY.git (fetch)
    # origin  git@github.com:USERNAME/REPOSITORY.git (push)

    Change your remote's URL from SSH to HTTPS with the remote set-url command.

    git remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git

    Verify that the remote URL has changed.

    git remote -v
    # Verify new remote URL
    # origin  https://github.com/USERNAME/OTHERREPOSITORY.git (fetch)
    # origin  https://github.com/USERNAME/OTHERREPOSITORY.git (push)

The next time you git fetch, git pull, or git push to the remote repository, you'll be asked for your GitHub username and password.


Switching remote URLs from HTTPS to SSH

    Open Terminal (for Mac users) or the command prompt (for Windows and Linux users).

    Change the current working directory to your local project.

    List your existing remotes in order to get the name of the remote you want to change.

    git remote -v
    # origin  https://github.com/USERNAME/REPOSITORY.git (fetch)
    # origin  https://github.com/USERNAME/REPOSITORY.git (push)

    Change your remote's URL from HTTPS to SSH with the remote set-url command.

    git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git

    Verify that the remote URL has changed.

    git remote -v
    # Verify new remote URL
    # origin  git@github.com:USERNAME/OTHERREPOSITORY.git (fetch)
    # origin  git@github.com:USERNAME/OTHERREPOSITORY.git (push)



Troubleshooting

You may encounter these errors when trying to changing a remote.
No such remote '[name]'

This error means that the remote you tried to change doesn't exist:

git remote set-url sofake https://github.com/octocat/Spoon-Knife
# fatal: No such remote 'sofake'

Check that you've correctly typed the remote name.

===================================


